@layout CleanLayout
@page "/Chat"
@attribute [Authorize]
@using System
@using System.Collections.Generic
@using AdminPanel.Client.Components.CustomerService
@using AdminPanel.Client.Models
@using System.Linq
@using System.Threading.Tasks
@using AdminPanel.Client.DTOs
@using AdminPanel.Client.Services
@using Microsoft.AspNetCore.SignalR.Client
@using UCLDreamTeam.SharedInterfaces
@inject ITicketService TicketService
@inject IReservationService ReservationService
@inject IResourceService ResourceService
@inject IAuthService LanchService
@*Todo: Reamake Ticekt Panel*@
<div class="container-fluid">
    <div class="row h-100">
        
    </div>
</div>


@code
{
    private HubConnection SuportHubConection;
    public List<Ticket> TicketDTOs { get; set; }
    public TicketDTO ActiveTicketDTO { get; set; }
    public int QueueCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var test = await TicketService.GetByUserIdAsync((await LanchService.GetCurrentUser()).Id);
        Console.WriteLine(test);
        
    }

    async void InitializeTicket()
    {
        //var result = await TicketService.GetByUserIdAsync(Guid.NewGuid());

        //foreach (var ticket in result)
        //{
        //    Reservation reservation = new Reservation();

        //    if (ticket.ReservationId.HasValue)
        //    {
        //        reservation = await ReservationService.GetFromId(ticket.Id);
        //    }

        //    TicketDTOs.Add(new TicketDTO { Ticket = ticket, Reservation = reservation ?? null, Resource = await ResourceService.GetFromId(reservation.ResourceId) ?? null });
        //}

        //SetActiveTicket();
    }

    //private void SetActiveTicket()
    //{
    //    TicketDTOs = TicketDTOs.OrderByDescending(x => x.Ticket.Messages.Min(s => s.TimeStamp)).ToList();
    //    TicketDTOs.First().Ticket.Active = true;
    //    ActiveTicketDTO = TicketDTOs.First(x => (bool)x.Ticket.Active);
    //    StateHasChanged();
    //}
}