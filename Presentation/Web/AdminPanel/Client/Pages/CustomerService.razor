@layout CleanLayout
@page "/Chat"
@attribute [Authorize(Roles = "admin, customerservice")]
@using System
@using System.Collections.Generic
@using AdminPanel.Client.Components.CustomerService
@using AdminPanel.Client.Models
@using System.Linq
@using System.Threading.Tasks
@using AdminPanel.Client.DTOs
@using AdminPanel.Client.Services
@using Microsoft.AspNetCore.SignalR.Client
@using UCLDreamTeam.SharedInterfaces
@inject ITicketService TicketService
@inject IReservationService ReservationService
@inject IResourceService ResourceService
@inject ITicketService TicketService
@inject IMailService MailService
@inject IAuthService AuthService

<div class="container-fluid">
    <div class="row h-100">
        <TicketsPanel UpdateTicket="UpdateTicket" GetNextCustomer="@(() => GetNextCustomer(Guid.NewGuid().ToString()))" TicketDTOs=@(TicketDTOs ?? new List<TicketDTO>()) QueueCount=QueueCount />
        @if (TicketDTOs != null)
        {
            <ChatPanel TicketDTO=@ActiveTicketDTO UpdateStatus="@((Status status) => UpdateStatus(status))" />
        }
        else
        {
            <div class="jumbotron">
                <h1>Her er tomt...</h1>
                <p>Der er ingen support sager på nuværende tidspunkt. Kom tilbage senere.</p>
                <p><a class="btn btn-primary btn-lg" href="" role="button">Gå tilbage til startsiden.</a></p>
            </div>
        }
    </div>
</div>


@code
{
    private HubConnection _chatHubConnection;
    private HubConnection _queueHubConnection;
    private User CurrentUser;
    public List<TicketDTO> TicketDTOs { get; set; }
    public TicketDTO ActiveTicketDTO { get; set; }
    public int QueueCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await AuthService.GetCurrentUser();
        #region SignalR ChatHub Methods

        _chatHubConnection = new HubConnectionBuilder()
.WithUrl("http://localhost:5017/ChatHub")
.Build();

        _chatHubConnection.On<Message>("SendMessageToGroup", (message) =>
        {
            TicketDTOs.Find(x => x.Ticket.Id == message.TicketId).Ticket.Messages.Add(message);
        });

        await _chatHubConnection.StartAsync();

        #endregion

        #region SignalR QueueHub Methods

        _queueHubConnection = new HubConnectionBuilder()
    .WithUrl("http://localhost:5017/QueueHub")
    .Build();

        _queueHubConnection.On<Guid>("ReceiveTaskId", async (ticketId) =>
        {
            var ticket = await TicketService.GetByIdAsync(ticketId);
            try
            {
                Reservation reservation = new Reservation();

                if (ticket?.ReservationId.HasValue ?? false)
                {
                    reservation = await ReservationService.GetFromId(ticket.ReservationId ?? Guid.NewGuid());
                }

                ticket.Messages = new List<Message>();

                TicketDTOs.Add(new TicketDTO { Ticket = ticket, Reservation = reservation, Resource = await ResourceService.GetFromId(reservation?.ResourceId ?? Guid.Empty) ?? null });

            }
            catch (Exception e)
            {
                TicketDTOs.Add(new TicketDTO { Ticket = ticket });
            }

            Console.WriteLine(TicketDTOs);

            SetActiveTicket();
        });

        _queueHubConnection.On<int>("ReceiveQueueCount", (queueCount) =>
        {
            QueueCount = queueCount;
            StateHasChanged();
        });

        await _queueHubConnection.StartAsync();
        #endregion

        InitializeTicket();

        await GetQueueCount();
    }

    #region SignalR ChatHub Methods
    async Task JoinGroup(string groupId) =>
        await _chatHubConnection.SendAsync("JoinGroup", groupId);

    Task SendMessageToGroup(Message message) =>
        _chatHubConnection.SendAsync("SendMessageToGroup", message);

    public bool IsChatConnected =>
        _chatHubConnection.State == HubConnectionState.Connected;
    #endregion

    #region SignalR QueueHub Methods

    async Task GetNextCustomer(string groupId)
    {
        switch (_queueHubConnection.State)
        {
            case HubConnectionState.Disconnected:
                await _queueHubConnection.StartAsync();
                break;
            case HubConnectionState.Connected:
                break;
            case HubConnectionState.Connecting:
            case HubConnectionState.Reconnecting:
                await Task.Delay(2000);
                break;
            default:
                break;
        }
            await _queueHubConnection.SendAsync("GetNextCustomer", groupId);
        await JoinGroup(groupId);
        InitializeTicket();
    }

    async Task GetQueueCount() => await _queueHubConnection.SendAsync("GetQueueCount");

    public bool IsQueueConnected =>
        _queueHubConnection.State == HubConnectionState.Connected;

    #endregion

    void UpdateTicket(TicketDTO ticketDTO)
    {
        TicketDTOs.First(x => x.Ticket.Active == true).Ticket.Active = null;
        TicketDTOs.First(x => x.Ticket.Id == ticketDTO.Ticket.Id).Ticket.Active = true;
        ActiveTicketDTO = ticketDTO;
    }

    async void InitializeTicket()
    {
        var result = await TicketService.GetByUserIdAsync(CurrentUser?.Id ?? Guid.Empty);

        if (result != null)
        {
            foreach (var ticket in result)
            {
                Reservation reservation = new Reservation();

                if (ticket.ReservationId.HasValue)
                {
                    reservation = await ReservationService.GetFromId(ticket.Id);
                }

                TicketDTOs.Add(new TicketDTO { Ticket = ticket, Reservation = reservation ?? null, Resource = await ResourceService.GetFromId(reservation.ResourceId) ?? null });
            }

            Console.WriteLine(TicketDTOs);

            SetActiveTicket();
        }
    }

    private void SetActiveTicket()
    {
        TicketDTOs = TicketDTOs.OrderByDescending(x => x.Ticket.Messages.Min(s => s.TimeStamp)).ToList();
        TicketDTOs.First().Ticket.Active = true;
        ActiveTicketDTO = TicketDTOs.First(x => (bool)x.Ticket.Active);
        StateHasChanged();
    }

    private async void UpdateStatus(Status status, bool sendChatLog = false)
    {
        if (sendChatLog && status == Status.Closed)
        {
            await MailService.SendChatLog(ActiveTicketDTO);
        }
        ActiveTicketDTO.Ticket.Status = status;
        await TicketService.UpdateTicket(ActiveTicketDTO.Ticket);
    }
}